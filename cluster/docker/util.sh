#!/bin/bash

# Copyright 2015 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A library of helper functions that each provider hosting Kubernetes must implement to use cluster/kube-*.sh scripts.
set -e

KUBE_ROOT=$(dirname "${BASH_SOURCE}")/../..
source "${KUBE_ROOT}/cluster/docker/${KUBE_CONFIG_FILE-"config-default.sh"}"

# Verify SSH is available and ENVs are set
# 
# Assumed vars:
#   MASTER 
#   NODES
#   INFRA
function verify-prereqs {
  # Make sure env is properly set
  : ${MASTER?"Need to set MASTER"}
  : ${NODES?"Need to set NODES"}

  case "$INFRA" in
  "baremetal")
      echo "Infra provider is set to: $INFRA"
      ;;
  *) echo "Infra provider for $INFRA is not implemented yet, welcome to contribute!"
      ;;
  esac

  # Call the function defined in specific infra provider 
  source $KUBE_ROOT/cluster/docker-$INFRA/util.sh
  verify-prereqs-$INFRA
}

# Verify cluster
# 
# Assumed vars:
#   INFRA
function validate-cluster {
  sleep 5 # For now we just sleep to wait the world

  validate-cluster-$INFRA

  echo
  echo "Kubernetes-in-docker cluster is deployed.  The master should be running at:"
  echo
  echo "  http://${MASTER_IP}:8080"
}


# Instantiate a kubernetes cluster on docker
#
# Assumed vars:
#   MASTER
#   NODES
#   NODE_ONLY
# Vars set:
#   KUBE_ROOT
#   NUM_MINIONS
function kube-up() {
  # Generate ENVs used to deploy master and nodes
  generate_env

  NUM_MINIONS=0
 
  for node in $NODES
  do
    {
      if [ "$node" != $MASTER ]; then
        deploy-node ${node#*@}
      else
        # This machine occurs both in NODES & MASTER, we
        # should deploy it as a "master & node"
        #
        # NODE_ONLY=yes means that we only want to join existing master
        if [[ "yes" != $NODE_ONLY ]]; then
          REGISTER_MASTER_KUBELET="yes"
          deploy-node-master 
        fi
      fi
      NUM_MINIONS=$((NUM_MINIONS+1))
    }
  done

  # Need to deploy master separately only when:
  # 1. not in NODE_ONLY mode
  # 2. master is not deployed during the loop above
  if [[ "yes" != $NODE_ONLY && "yes" != $REGISTER_MASTER_KUBELET ]]; then
    deploy-node-master
  fi

  wait

  export NUM_MINIONS=$NUM_MINIONS

  echo "Deploy Complete!"
}

# Generate ENV file for nodes to use
#
# Assumed vars:
#   in config-default.sh
function generate_env(){
  cat <<EOF > docker/kube-config/node.env
# Do not modify!
# This file is generated by docker/util.sh#generate_env()
export FLANNEL_VERSION=$FLANNEL_VERSION
export ETCD_VERSION=$ETCD_VERSION
export K8S_VERSION=$K8S_VERSION
export NODES="$NODES"
export MASTER=$MASTER
export MASTER_IP=$MASTER_IP
export MASTER_CONF=$MASTER_CONF
export SSH_OPTS="$SSH_OPTS"
export FLANNEL_NET=$FLANNEL_NET
EOF
  cat ${KUBE_ROOT}/cluster/docker/kube-config/node.env

  read -p "Are you sure? (y|n) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]
  then
      echo "Abort!"
      exit 1
  fi

}

# Deploy master (or master & node)
#
# Assumed vars:
#   MASTER_IP
#   INFRA
function deploy-node-master() {
  # copy the scripts to the ~/docker directory on the master
  echo "... Deploying Master on machine $MASTER_IP"
  echo
  deploy-node-master-$INFRA
}

# Deploy node
#
# Assumed vars:
#   INFRA
#   node
function deploy-node() {
  # copy the scripts to the ~/docker directory on the node
  echo "... Deploying Node on machine $node"
  echo
  deploy-node-$INFRA
}

# Delete a kubernetes cluster
#
# Assumed vars:
#   INFRA
function kube-down {
  # NOTE kube-dwon can only be called after deployed
  kube-down-$INFRA
  wait
}

# Update a kubernetes cluster with latest source
function kube-push {
  echo "TODO Not implemented"
}

# Perform preparations required to run e2e tests
function prepare-e2e() {
  echo "k8s in docker doesn't have special preparations for e2e tests" 1>&2
}
